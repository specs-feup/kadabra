import weaver.Weaver;
import weaver.Query;
import lara.Io;

aspectdef Test

	//var counter = 0;

	// Select binary operators in each file
	for($op of Query.search('binaryExpression').get()) {
	
		if($op.operator === '<') {
		
			// Store current operator
			var previousOp = $op.operator;

			// Set new operator
			$op.operator = '>';
			
			println($op.ancestor('method').srcCode);
			// Create output folder for this code version
			//var outputFolder = Io.getPath("output_" + counter);
			//counter++;

			// Write modified code
			//Weaver.writeCode(outputFolder);

			// Restore operator
			$op.operator = previousOp;
		}
	}
	

	// Select unary operators and change them for --
	for($op of Query.search('method', {name: 'unaryTest'}).search('unaryExpression').get()) {
		// Store current operator
		var previousOp = $op.operator;
	
		// Set new operator
		$op.operator = '--';
		
		println($op.ancestor('method').srcCode);
	
		// Restore operator
		$op.operator = previousOp;
	}
	
	// Select unary operators and remove them
	for($op of Query.search('method', {name: 'unaryTest2'}).search('unaryExpression').get()) {
		
		// If operator is a single statement in a block, cannot replace it with operand
		// E.g., a++; cannot be replaced with a;, it does not compile in Java
		if(!$op.parent.isBlock) {
			$op.insert replace $op.operand;
		}
	}
	
	println(Query.search('method', {name: 'unaryTest2'}).getFirst().srcCode);


	// Select unary operators and remove them
	for($op of Query.search('method', {name: 'unaryTest3'}).search('unaryExpression').get()) {
		$op.insert replace "--a";
	}
	
	println(Query.search('method', {name: 'unaryTest3'}).getFirst().srcCode);
	
	
	
	// Select unary operator !, remove it and restore it
	for($op of Query.search('method', {name: 'unaryTest4'}).search('unaryExpression').get()) {
		
		// Copies the unary expression (e.g.,  !a)
		var $originalOp = $op.copy;

		// Replaces the unary expression with the operand (e.g., !a becomes a) and returns the new expression
		var $newOp = $op.insertReplace($op.operand);
		println(Query.search('method', {name: 'unaryTest4'}).getFirst().srcCode);

		// Replaces the new expression with a copy of the original expression (e.g., a becomes !a again)
		$newOp.insert replace($originalOp);
		println(Query.search('method', {name: 'unaryTest4'}).getFirst().srcCode);
	}
	


end
