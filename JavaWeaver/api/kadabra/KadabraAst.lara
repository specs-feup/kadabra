import lara.util.StringSet;
import weaver.WeaverJps;
import weaver.Query;

import kadabra._KadabraJavaTypes;

/**
 * Utility methods related with the searching join points and AST properties.
 *
 * @class
 */
var KadabraAst = {};

/**
 * Searches constant values. Currently, three types of constants are returned:
 *
 * - Class fields which are final and initialized when declared;
 * - Assignments to final fields;
 * - Local variables which are final and initialized when declared;
 * 
 *
 * @param @param {$jp} [$startingPoint = $root] - The join point where the search for constants will start (inclusive).
 *
 * @return {$jp[]} an array of join points, which can either be a $field, an $assign or a $localVariable.
 */
KadabraAst.getConstantInitializations = function($startingPoint) {

	if($startingPoint === undefined) {
		$startingPoint = WeaverJps.root();
	}

	var constants = [];

	for(var $field of searchFromInclusive($startingPoint, 'field').get()) {

		if($field.init === undefined) {
			continue;
		}

		if(!$field.isFinal) {
			continue;
		}

		constants.push($field);
	}

	for(var $assign of searchFromInclusive($startingPoint, 'assignment').get()) {
		
		if(!$assign.lhs.isFinal) {
			continue;
		}

		constants.push($assign);
	}	


	for(var $localVar of WeaverJps.searchFromInclusive($startingPoint, 'localVariable').get()) {
		if($localVar.init === undefined) {
			continue;
		}
		
		if(!$localVar.isFinal) {
			continue;
		}

		constants.push($localVar);
	}	

	return constants;
}

KadabraAst._BINARY_OP_SET = undefined;

/**
 * @return {lara.util.StringSet} String set with valid binary operators
 */
KadabraAst.getBinaryOperators = function() {

	// Initialize, if undefined
	if(KadabraAst._BINARY_OP_SET === undefined) {
		KadabraAst._BINARY_OP_SET = new StringSet();
		
		for(var binaryOp of _KadabraJavaTypes.getOperatorUtils().getValidBinaryStrings()) {
			KadabraAst._BINARY_OP_SET.add(binaryOp);
		}
		
		// TODO: Lock set?
	}

	return KadabraAst._BINARY_OP_SET;
}

KadabraAst._UNARY_OP_SET = undefined;

/**
 * @return {lara.util.StringSet} String set with valid unary operators
 */
KadabraAst.getUnaryOperators = function() {

	// Initialize, if undefined
	if(KadabraAst._UNARY_OP_SET === undefined) {
		KadabraAst._UNARY_OP_SET = new StringSet();
		
		for(var unaryOp of _KadabraJavaTypes.getOperatorUtils().getValidUnaryStrings()) {
			KadabraAst._UNARY_OP_SET.add(unaryOp);
		}
		
		// TODO: Lock set?
	}

	return KadabraAst._UNARY_OP_SET;
}

/**
 * Creates an object representing the class hierarchy of the current program.
 *
 * @return {map{string:$class[]}} map where the keys are String with the fully qualified name of the class, and the value is an array with $class join points that are subclasses of the class represented by the key. If the map returns undefined, this means that the class has no subclasses.
 */
KadabraAst.getHierarchy = function() {

    var hierarchy = {};

    for($jp of Query.search("class")) {
        var superClass = $jp.superClass;
        var subClasses = hierarchy[superClass];
        
        // Initialize array if needed
        if(subClasses === undefined) {
            subClasses = [];
            hierarchy[superClass] = subClasses;
        }

        subClasses.push($jp);
        
        //println("Name: " + $jp.qualifiedName);
    }
    
	return hierarchy;
}
