import kadabra.monitor.Timer;
import kadabra.Utils;
/**
 * Provides basic functionality to test versions by: <br>
 * * adding a new timer, test time, best time, bestVersion, adapt, numRuns and warmup fields, <br>
 * * creating basic code to start the adaptation after "numRuns" executions <br>  
 * * creating basic code to update after a given execution <br> <br>
 * must invoke methods "onNewVersion", "ifBetterVersion" and "beforeUpdate" before injecting the adaptation <br>
 * must insert the following variables: adapt(), update(), timerStart, timerStop
 */

aspectdef NewVersionTester
	input $class, targetType, timeUnit="Millis", numRuns=1, warmup=0, onInitializeCode='', onFinalizeCode ='', jumpIfWorse=false end
	output
		$tester, testTime, bestTime, bestVersion, testPos, bestPos,
		onInitialize, onFinalize, setTests,
		timerStart, timerStop, getTime,
		start, pause, stop, update, timerStopAndUpdate,
		isAdapting, hasFinished
	end
	call convert: ConvertPrimitive(targetType);
	var initCode = "null";
	var finCode ="null";
	if(onInitializeCode != undefined && !onInitializeCode.isEmpty()){
		initCode = %{()->{[[onInitializeCode]]}}%;
	}
	if(onFinalizeCode != undefined && !onFinalizeCode.isEmpty()){
		finCode = %{()->{[[onFinalizeCode]]}}%;
	}
//
//	var getInitCode = function(){
//		return %{VersionTester.newInstance([[JSON.stringify(timeUnit)]], [[numRuns]], [[warmup]], [[initCode]], [[finCode]], [[jumpIfWorse]])}%;
//	};
	
	var testerInit = %{VersionTester.newInstance([[JSON.stringify(timeUnit)]], [[numRuns]], [[warmup]], [[jumpIfWorse]])}%;
	
	$class.exec $tester: newField(["private", "static"], "weaver.kadabra.monitor.VersionTester<"+convert.wrapper+">", "tester", testerInit);

	onInitialize = function(code){
		return %{[[$tester]].setOnInitialize(()->{[[code]]});}%;
	};

	onFinalize = function(code){
		return %{[[$tester]].setOnTestFinish(()->{[[code]]});}%;
	};


	setTests = function(versions){
		var vers = versions.join(",\n");
		return %{[[$tester]].setTests([[vers]]);}%;
	};

	hasFinished = $tester+".hasFinished()";
	start = $tester+".start();";
	pause = $tester+".pause();";
	stop =  $tester+".stop();";
	timerStart =  $tester+".startTimer();";
	timerStop =  $tester+".stopTimer();";
	getTime =  $tester+".getTime()";
	update = $tester+".update();";
	timerStopAndUpdate = %{[[timerStop]]
					  [[update]]}%;

	testTime = $tester+".getTestTime()";
	bestTime = $tester+".getBestTime()";
	testPos = $tester+".getTestPos()";
	bestPos = $tester+".getBestPos()";
	bestVersion = $tester+".getBestVersion()";
	numRuns	 = $tester+".getNumRuns()";
	
end
aspectdef VersionTester
	input $class, targetType, targetFieldRef, numRuns=1, timeUnit="Millis", warmup=0, jumpIfWorse=false end
	output 
		$testTime, $bestTime, $bestVersion, $numRuns, $improved = "improved",
		ifBetterVersion, onNewVersion, beforeUpdate, onInitialize,//onReset,
		timerStart, timerStop, getTime, 
		adapt, update, start, stop, pause, //reset,
		isAdapting
	end
	static var mods = ["private", "static"]; end
	initialize
		var newVersionCode = "";
		var betterVersionCode = "";
		var beforeUpdateCode = "";
		//var onResetCode = "";
		var onInitializeCode = "";
		onNewVersion = function(code){newVersionCode = code;};
		ifBetterVersion = function(code){betterVersionCode = code;};
		beforeUpdate = function(code){beforeUpdateCode = code;};
		//onReset = function(code){onResetCode = code;};
		onInitialize = function(code){onInitializeCode = code;};
	end
	var timer = new MillisTimer();
	switch(timeUnit.toUpperCase()){
		case "MILLIS":
		case "MILLISECONDS":
		case "MS":
			//timer = new MillisTimer();
			break;
		case "NANO":
		case "NANOSECONDS":
		case "NS":
			timer = new NanoTimer();
			break;
		default:
			throw 'The given time unit cannot be used: '+timeUnit+'. Please use "nanoseconds"/"ns" or "milliseconds"/"ms"';
	}
	call convert: ConvertPrimitive(targetType);
	
	call timer($class); //NanoTimer
	$class.exec $warmup: 		newField(mods, "int", "warmup", 0);
	$class.exec $numRuns: 		newField(mods, "int", "numRuns", 0);
	$class.exec $bestVersion: 	newField(mods, convert.wrapper, "bestVersion", null);
	$class.exec $bestTime:		newField(mods, "long", "bestTime", "Long.MAX_VALUE");
	$class.exec $testTime:		newField(mods, "long", "testTime", 0);
	$class.exec $adapt: 		newField(mods, "boolean", "adapt", false);
	$class.exec $init: 			newField(mods, "boolean", "initialized", false);
	
	
	adapt = function(alwaysAdapt, useNewVersionInInit){
		var header = '';
		var newVersionInInit = '';
		if(alwaysAdapt == true){
			// means that will always execute the adaptation, even if "+$adapt+" is false!
			header = $adapt + " = true;";
		}else{
			header = "if("+$adapt+")";
		}
		if(useNewVersionInInit == true){
			newVersionInInit = newVersionCode;
		}
		

		var resetVars = %{
			[[$testTime]] = 0;
			[[$numRuns]] = [[numRuns]];
			[[$warmup]] = [[warmup]];
		}%;
		
		return %{
			[[header]] { //adapt begin
				if(![[$init]]){ //Reset all variables so the test starts at the first version and without best time!
					[[timerStop]]
					[[$bestTime]] = Long.MAX_VALUE;
					[[$testTime]] = 0;
					[[$bestVersion]] = null;
					[[$init]] = true;
					[[resetVars]]
					[[onInitializeCode]]

					[[newVersionInInit]]
				}
				
				if([[$numRuns]] == 0){
					boolean improved = false;
					//If test version is better than the current best version
					if([[$testTime]] < [[$bestTime]]){
						[[$bestVersion]] = [[targetFieldRef]];
						[[$bestTime]] = [[$testTime]];
						improved = true;
						//execute extra code
						[[betterVersionCode]]
					}
					//execute code that provides a new version
					[[newVersionCode]]
	
					//Reset counters and timers for the next test;
					[[resetVars]]
				}
			} //adapt end}%;
	};
	timerStart = timer.start;
	timerStop = timer.stop;
	getTime = timer.getTime;
	var ifWorseCode = !jumpIfWorse?'': //do nothing
		(%{if([[$testTime]] > [[$bestTime]]){ //else, If it is taking more time than the best version, then we discard this version
			[[$numRuns]] = 0;
		   } else}%);
		   
	update =  function(){return %{
		[[beforeUpdateCode]]
		if ([[$adapt]]) {
			if ([[$warmup]] == 0) {
				[[$testTime]] += [[timer.getTime]];
				[[ifWorseCode]]
				[[$numRuns]]--;
			} else {
				[[$warmup]]--;
			}
		}}%;
	};
	//startAdapt = $adapt +" = true;";
	//stopAdapt = $adapt +" = false;";
	isAdapting = $adapt.name;
	start = $adapt +" = true;";
	pause = $adapt +" = false;";
	stop = %{
		[[$init]] = false;
		[[$adapt]] = false;}%;
end
