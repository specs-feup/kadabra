import lara.mutation.IterativeMutation;


/**
 */
var ConditionalOperatorDeletionMutation = function() {
	//Parent constructor
    IterativeMutation.call(this, "ConditionalOperatorDeletionMutation");
};
// Inheritance
ConditionalOperatorDeletionMutation.prototype = Object.create(IterativeMutation.prototype);


/*** IMPLEMENTATION OF INSTANCE METHODS ***/

ConditionalOperatorDeletionMutation.prototype.isMutationPoint = function($jp) {

	if($jp.instanceOf('if') || $jp.instanceOf('ternary') || $jp.instanceOf('loop')) {

		if($jp.cond.instanceOf('unaryExpression') && $jp.cond.operator === '!') {
			return true;
		}
	}

	return false;
}


ConditionalOperatorDeletionMutation.prototype.mutate = function* ($jp) {

	var mutation = $jp.copy;
	
	mutation.cond.insertReplace(mutation.cond.operand.copy());
	
	debug("/*--------------------------------------*/");
	debug("Mutating operator: "+ $jp +" to "+ mutation);
	debug("/*--------------------------------------*/");		
	
	yield mutation;

}
