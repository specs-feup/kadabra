import lara.mutation.Mutator;

/**
 *  @param {$binaryExpression} $binaryExpression - A join point of type binaryExpression.
 *  @param {String[] | String...} newOperators - Operators that will be used to mutate the given binaryExpression.
 */
var BinaryExpressionMutator = function($binaryExpression) {
	// Parent constructor
    Mutator.call(this);

	// Instance variables
	this.$binaryExpression = $binaryExpression;
	this.newOperators = arrayFromArgs(arguments, 1);
	this.currentIndex = 0;
	this.previousOp = undefined;

	
	// Checks

	// Check it is a binaryExpression
	if(!$binaryExpression.instanceOf('binaryExpression')) {
		throw "Expected a binaryExpression, received a " + $binaryExpression.joinPointType;
	}
	
	// TODO: Check if operators are valid

};

// Inheritance
BinaryExpressionMutator.prototype = Object.create(Mutator.prototype);


/*** IMPLEMENTATION OF INSTANCE METHODS ***/

BinaryExpressionMutator.prototype.hasMutations = function() {
	return this.currentIndex < this.newOperators.length;
}


BinaryExpressionMutator.prototype._mutatePrivate = function() {
	// Obtain new operator, increment index
	var newOp = this.newOperators[this.currentIndex];
	this.currentIndex++;
	
	// Store current operator
	this.previousOp = this.$binaryExpression.operator;

	// Set new operator
	this.$binaryExpression.operator = newOp;
}

BinaryExpressionMutator.prototype._restorePrivate = function() {
	// Restore operator
	this.$binaryExpression.operator = this.previousOp;
	this.previousOp = undefined;
}
