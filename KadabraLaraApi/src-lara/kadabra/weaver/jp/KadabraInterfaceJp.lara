import weaver.jp.InterfaceJp;
import weaver.Weaver;


_lara_dummy_ = Object.defineProperty(InterfaceJp.prototype, 'name', {
	get: function () { 
		return Weaver.AST_METHODS.toJavaJoinPoint(this.astNode).name; 
	}
});

_lara_dummy_ = Object.defineProperty(InterfaceJp.prototype, 'methods', {
	get: function () { 
		return CommonJoinPoints.toJoinPoints(Weaver.toJs(this.astNode.getMethods()));
	}
});

_lara_dummy_ = Object.defineProperty(InterfaceJp.prototype, 'allMethods', {
	get: function () { 
		var methods = this.methods;

		for (superInterface of this.allInterfaces) {
			methods = methods.concat(superInterface.methods);
		}
		
		return methods;
	}
});

_lara_dummy_ = Object.defineProperty(InterfaceJp.prototype, 'interfaces', {
	get: function () {
		var superInterfaces = this.astNode.getSuperInterfaces();
		
		// println(superInterfaces);
		
		if (superInterfaces == null) return [];
		
		var interfaces = [];

		for (superInterface of superInterfaces) {
			var superInterfaceJp = CommonJoinPoints.toJoinPoint(superInterface.getTypeDeclaration()); 
			interfaces.push(superInterfaceJp);
		}
		
		return interfaces;
	 }
});

_lara_dummy_ = Object.defineProperty(InterfaceJp.prototype, 'allInterfaces', {
	get: function () {
		
		var allInterfaces = [];

		for (superInterface of this.interfaces) {
			allInterfaces.push(superInterface);
			allInterfaces = allInterfaces.concat(superInterface.allInterfaces);
		}
		
		return allInterfaces;
	 }
});