import weaver.jp.ClassJp;
import weaver.Weaver;

_lara_dummy_ = Object.defineProperty(ClassJp.prototype, 'id', {
	get: function () {
		if(this._package === "unnamed package")
			return this.name;
		return this._package+"."+this.name; 
	}
});

_lara_dummy_ = Object.defineProperty(ClassJp.prototype, '_package', {
	get: function () { 
		return this.astNode.getPackage().toString(); 
	}
});

_lara_dummy_ = Object.defineProperty(ClassJp.prototype, 'name', {
	get: function () { 
		return Weaver.AST_METHODS.toJavaJoinPoint(this.astNode).name; 
	}
});

_lara_dummy_ = Object.defineProperty(ClassJp.prototype, 'superClasses', {
	get: function () { 
		var superClass = this.astNode.getSuperclass();
		//println(superClass);
		
		if(superClass !== null && superClass.getTypeDeclaration() !== null)
			return [CommonJoinPoints.toJoinPoint(superClass.getTypeDeclaration())];
		
		return [];
		
	}
});

_lara_dummy_ = Object.defineProperty(ClassJp.prototype, 'allSuperClasses', {
	get: function () {
		var allSuperClasses = [];

		for(superClass of this.superClasses){
			allSuperClasses.push(superClass);
			allSuperClasses = allSuperClasses.concat(superClass.allSuperClasses);
		}
			 
		return allSuperClasses;
	}
});

_lara_dummy_ = Object.defineProperty(ClassJp.prototype, 'methods', {
	get: function () { 
		return CommonJoinPoints.toJoinPoints(Weaver.toJs(this.astNode.getMethods()));
	}
});

_lara_dummy_ = Object.defineProperty(ClassJp.prototype, 'constructors', {
	get: function () { 	
		return CommonJoinPoints.toJoinPoints(Weaver.toJs(this.astNode.getConstructors()));
	}
});

_lara_dummy_ = Object.defineProperty(ClassJp.prototype, 'allMethods', {
	get: function () { 	
		return this.constructors.concat(this.methods);
	}
});

_lara_dummy_ = Object.defineProperty(ClassJp.prototype, 'fields', {
	get: function () {
		return CommonJoinPoints.toJoinPoints(Weaver.toJs(this.astNode.getFields())); 
	}
});

ClassJp.prototype.equals = function(classJp) {
	if(!this.sameTypeAs(classJp))
		return false;
		
	return this.name === classJp.name;
	
}

_lara_dummy_ = Object.defineProperty(ClassJp.prototype, 'isCustom', {
	get: function () {
		
		return !this.astNode.isShadow(); 
	}
});


