import weaver.jp.ClassJp;
import weaver.Weaver;

_lara_dummy_ = Object.defineProperty(ClassJp.prototype, 'id', {
	get: function () {
		//return this._qualifiedName.replace(/\$/g, '.');
		return this._qualifiedName;
	}
});

_lara_dummy_ = Object.defineProperty(ClassJp.prototype, '_package', {
	get: function () {
		if(this.astNode.getPackage() === null)
			return null; 
		return this.astNode.getPackage().toString(); 
	}
});

_lara_dummy_ = Object.defineProperty(ClassJp.prototype, '_qualifiedName', {
	get: function () { 
		return this.astNode.getQualifiedName(); 
	}
});

_lara_dummy_ = Object.defineProperty(ClassJp.prototype, 'name', {
	get: function () { 
		return Weaver.AST_METHODS.toJavaJoinPoint(this.astNode).name; 
	}
});

_lara_dummy_ = Object.defineProperty(ClassJp.prototype, 'superClasses', {
	get: function () { 
		var superClass = this.astNode.getSuperclass();
		//println(superClass);
		
		if(superClass !== null && superClass.getTypeDeclaration() !== null)
			return [CommonJoinPoints.toJoinPoint(superClass.getTypeDeclaration())];
		
		return [];
		
	}
});

_lara_dummy_ = Object.defineProperty(ClassJp.prototype, 'allSuperClasses', {
	get: function () {
		var allSuperClasses = [];

		for(superClass of this.superClasses){
			allSuperClasses.push(superClass);
			allSuperClasses = allSuperClasses.concat(superClass.allSuperClasses);
		}
			 
		return allSuperClasses;
	}
});

_lara_dummy_ = Object.defineProperty(ClassJp.prototype, 'methods', {
	get: function () { 
		return CommonJoinPoints.toJoinPoints(Weaver.toJs(this.astNode.getMethods()));
	}
});

_lara_dummy_ = Object.defineProperty(ClassJp.prototype, 'constructors', {
	get: function () { 	
		return CommonJoinPoints.toJoinPoints(Weaver.toJs(this.astNode.getConstructors()));
	}
});

_lara_dummy_ = Object.defineProperty(ClassJp.prototype, 'allMethods', {
	get: function () { 	
		return this.constructors.concat(this.methods);
	}
});

_lara_dummy_ = Object.defineProperty(ClassJp.prototype, 'listOfAllMethods', {
	get: function () { 	
		
		var allMethods = this.methods;

		for ($interface of this.allInterfaces) {
			allMethods = allMethods.concat($interface.methods);
		}

		for ($superClass of this.allSuperClasses) {
			allMethods = allMethods.concat($superClass.methods);
		}
		
		return allMethods;
	}
});

_lara_dummy_ = Object.defineProperty(ClassJp.prototype, 'fields', {
	get: function () {
		return CommonJoinPoints.toJoinPoints(Weaver.toJs(this.astNode.getFields())); 
	}
});

ClassJp.prototype.equals = function(classJp) {
	if(!this.sameTypeAs(classJp))
		return false;
		
	return this.name === classJp.name;
	
}

_lara_dummy_ = Object.defineProperty(ClassJp.prototype, 'isCustom', {
	get: function () {
		
		return !this.astNode.isShadow(); 
	}
});

_lara_dummy_ = Object.defineProperty(ClassJp.prototype, 'isAbstract', {
	get: function () {
		return this.astNode.isAbstract(); 
	}
});

_lara_dummy_ = Object.defineProperty(ClassJp.prototype, 'interfaces', {
	get: function () {
	
		var superInterfaces = this.astNode.getSuperInterfaces();
		
		// println(superInterfaces);
		
		if (superInterfaces == null) return [];
		
		var interfaces = [];

		for (superInterface of superInterfaces) {
			var superInterfaceJp = CommonJoinPoints.toJoinPoint(superInterface.getTypeDeclaration()); 
			interfaces.push(superInterfaceJp);
		}
		
		return interfaces; 
	 }
});

_lara_dummy_ = Object.defineProperty(ClassJp.prototype, 'allInterfaces', {
	get: function () {
		
		var allInterfaces = [];

		for (superInterface of this.interfaces) {
			allInterfaces.push(superInterface);
			allInterfaces = allInterfaces.concat(superInterface.allInterfaces);
		}

		for ($superClass of this.allSuperClasses) {
			allInterfaces = allInterfaces.concat($superClass.interfaces);
		}
		
		return allInterfaces;
	}
});